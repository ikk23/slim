
initialize() {
	defineConstant("CAPACITY", 100);
	defineConstant("DENSITY_INTERACTION_DISTANCE", 0.01);
	defineConstant("DRIVE_FITNESS_VALUE", 0.92);
	defineConstant("DROP_SIZE", 2);
	defineConstant("DROP_RADIUS", 0.01);
	defineConstant("EMBRYO_RESISTANCE_RATE", 0.02);
	defineConstant("GERMLINE_RESISTANCE_RATE", 0.08);
	defineConstant("GROWTH_AT_ZERO_DENSITY", 7);
	defineConstant("HETEROZYGOUS_DROP", T);
	defineConstant("HOMING_DRIVE", T);
	defineConstant("NUM_GRNAS", 1);
	defineConstant("RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE", T);
	defineConstant("RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE", F);
	defineConstant("R1_OCCURRENCE_RATE", 0.0);
	defineConstant("SPEED", 0.04);
	defineConstant("TRACK_BY_CELL", F);
	defineConstant("TRACK_RIPLEYS_L", F);
	defineConstant("NUMBER_OF_CELLS", 4);
	defineConstant("NO_DROP", F);
	defineConstant("TADE", F);
	defineConstant("TADE_SUPPRESSION", F);
	defineConstant("TADE_DOUBLE_RESCUE", F);
	defineConstant("TADS_AUTOSOMAL_SUPPRESSION", F);
	defineConstant("TADS_MODIFICATION", F);
	defineConstant("TARE", F);
	defineConstant("X_LINKED_DRIVE", F);
	// */    // End header.
	
	// Below are defaults - won't change from drive to drive
	defineConstant("BASELINE_HOMING_SUCCESS_RATE", 1.0); //default 1.0
	defineConstant("EQUILIBRIUM_BIN_POPULATION", 0.5*CAPACITY/20);
	defineConstant("EQUILIBRIUM_WT_ALLELE_THRESHOLD", 0.8*2*CAPACITY);
	defineConstant("FEMALE_SPEED", SPEED);
	defineConstant("FEMALE_ONLY_DROP", F);
	defineConstant("GENE_UTILITY_TRANSFORMATION_DRIVE", F);
	defineConstant("GENE_UTILITY_TRANSFORMATION_FITNESS", 0.95);
	defineConstant("GRNA_SATURATION_SIMULATED", F);
	defineConstant("HAPLOSUFFICIENT", F);
	defineConstant("HOMING_EDGE_EFFECT", 0.1);
	defineConstant("HOMING_PHASE_CUT_RATE", 1.0);
	defineConstant("INBREEDING_AVOIDANCE_FACTOR", 0.0);
	defineConstant("LATE_GERMLINE_RESISTANCE_RATE", 0.0); //default 0.9
	defineConstant("MATING_DISTANCE", SPEED);
	defineConstant("MALE_ONLY_DROP", F);
	defineConstant("MALE_ONLY_PROMOTER", F);
	defineConstant("MALE_MATE_CAP", F);
	defineConstant("MAX_MALE_MATINGS", 50);
	defineConstant("NUM_CUT_PHASES", 1);
	defineConstant("R2_FITNESS_VALUE", 1.0);
	defineConstant("REPRISING_BOUNDARIES", T);
	defineConstant("WT_START", F); //if this is T, start by dropping wt into empty space
	
	// For mortality rate as a function of age:
	// Some females are allowed to survive two generations:
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright-Fisher model.
	initializeSLiMModelType("nonWF");
	
	// This simulation will tske place accross continuous space.
	// By default, model occurs in a torroidal space to prevent edge effects.
	// The model tracks pedigrees in order to implement inbreeding avoidance.
	if (REPRISING_BOUNDARIES)
		initializeSLiMOptions(keepPedigrees = T, dimensionality = "x"); //for 1-D
	else
		initializeSLiMOptions(keepPedigrees=T, dimensionality="x", periodicity="x");
	
	
	// Four variations: Wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	cut = initializeMutationType("m5", 0.5, "f", 0.0);
	gap = initializeMutationType("m6", 0.5, "f", 0.0);
	variations = c(wt, dr, r1, r2, cut, gap);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0, NUM_GRNAS - 1);
	
	// These mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
	
	// Simulate sexual reproduction: A for autosome
	initializeSex("A");
	
	// Mate searching: Default interaction has strength 1 for individuals within max distance, 0 for others.
	initializeInteractionType(1, "x", reciprocal=T, maxDistance=MATING_DISTANCE);
	// Adult competition:
	initializeInteractionType(2, "x", reciprocal=T, maxDistance=DENSITY_INTERACTION_DISTANCE);
	// For now, just modeling interaction with flat strength of 1.
	// i2.setInteractionFunction("n", 1.0, DENSITY_INTERACTION_DISTANCE);
	
	//use this to track Ripley's L between wt individiauls
	initializeInteractionType(3, "x", reciprocal=T, maxDistance=DENSITY_INTERACTION_DISTANCE);
	
	
	// Constants based on other constants:
	// Rate of expected competition
	defineConstant("EXPECTED_ADULT_COMPETITION", CAPACITY * 2*DENSITY_INTERACTION_DISTANCE); //now interaction is evaluated in a line
}


//// FUNCTION FOR EVALUATING POPULATION SUPPRESSION WITH RECESSIVE FEMALE or MALE STERILITY STYLE SUPPRESSION.
function (logical)isRecessiveSterilitySuppressed(o<Individual>$ ind) {
	// Check both chromosomes for drive and type 2 resistance allele. These are the only variants that affect suppression.
	
	// Individual cannot reproduce if both chromosomes have either a drive or an r2.
	if ((ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome1.countOfMutationsOfType(m4) > 0) & (ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS| ind.genome2.countOfMutationsOfType(m4) > 0))
		return T;
	return F;
}


//// FUNCTION FOR EVALUATING POPULATION SUPPRESSION WITH HAPLOLETHAL STYLE SUPPRESSION.
function (logical)isHLSuppressed(o<Individual>$ ind) {
	// Check both chromosomes for the drive.	
	// Individual cannot reproduce if both chromosomes have a drive.
	if (sum(ind.genomes.countOfMutationsOfType(m2)==NUM_GRNAS)==2)
		return T;
	return F;
}


//// HELPER FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	// Resistance alleles form at a specified rate.	m3 is r1, m4 is r2.
	genome.addNewDrawnMutation(ifelse((runif(1) < R1_OCCURRENCE_RATE), m3,m4), locus);
}


//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
	// Determine presence of drive in this parent.
	parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If parent doesn't have drive allele, nothing happens in germline.
	if (!parent_drive_count)
		return;
	
	// Chromosome must have wt to cut, or nothing happens.
	if (child_chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Using the resistance rate passed to the function,
	// determine the per phase cut rate.
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - resistance_rate)^(1 / (NUM_CUT_PHASES * grna_factor));
	
	// Determine if cas9 cuts the chromosome in the germline.
	casCut(child_chromosome, per_phase_cut_rate);
}


//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
	// Determine presence of drive in this mother.
	mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If mother doesn't have drive allele, nothing happens in embryo.
	if (!mother_drive_count)
		return;
	
	// Determine the per phase cut rate.
	if (HOMING_DRIVE & sum(mother.genomes.countOfMutationsOfType(m1) == NUM_GRNAS) == 1)
		// Special case for homing drive individual that is dr/wt based on experimental data.
		cas_factor = 1.82;
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_RATE)^(mother_drive_count / (NUM_CUT_PHASES * grna_factor));
	
	// Then pass this rate as an argument to  the casCut funtion to
	// determine if cas9 cuts in the embryo for each chromosome.
	casCut(child_chromosome_1, per_phase_cut_rate);
	casCut(child_chromosome_2, per_phase_cut_rate);
}


//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f$ per_phase_cut_rate) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Vector of possible loci for cas9 to cut:
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// In each cut phase...
	for (i in seqLen(NUM_CUT_PHASES)) {
		// At each possible locus...
		for (j in seqAlong(wt_loci)) {
			// Check to see if cas9 cuts...
			if (runif(1) < per_phase_cut_rate) {
				// Convert the locus temporarily to an m5,
				// representing that this site is being cut.
				chromosome.addNewDrawnMutation(m5, wt_loci[j]);
			}
		}
		// If any cuts were made...
		if (chromosome.countOfMutationsOfType(m5)) {
			cut_loci = chromosome.positionsOfMutationsOfType(m5);
			// If just one cut is made, create an R1 or R2 resistance allele.
			if (chromosome.countOfMutationsOfType(m5) == 1)
				addResistanceAllele(chromosome, cut_loci[0]);
			else {
				// If multiple cuts are made in the same cut phase, loss of
				// function results. Convert leftmost site to m4 (R2)
				// everthing else through the rightmost site to m6 (cut).
				number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
				for (index in seqLen(number_of_cuts))
					chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
				chromosome.addNewDrawnMutation(m4, cut_loci[0]);
			}
			// Because some wt loci may have been cut out of the
			// chromosome, remake the vector of possible cut sites.
			if (chromosome.countOfMutationsOfType(m1) == 0)
				return;
			wt_loci = chromosome.positionsOfMutationsOfType(m1);
		}
	}
}


//// FUNCTION FOR SIMULATING HOMING THAT OCCURS DURING HOMOLOGY DIRECTED REPAIR.
function (void)hdr(o<Genome>$ chromosome, o<Individual>$ parent) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	// Determine presence of drive in this parent. If parent doesn't have drive allele, nothing happens in germline.
	if (parent.countOfMutationsOfType(m2)==0)
		return;
	
	// Rate of cutting occurs at the HOMING_PHASE_CUT_RATE, modified by gRNA saturation, if toggled on.
	cut_rate = HOMING_PHASE_CUT_RATE;
	if (GRNA_SATURATION_SIMULATED)
		cut_rate = 1 - (1 - HOMING_PHASE_CUT_RATE)^(1/NUM_GRNAS);
	
	// Vector of possible loci.
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// At each possible locus...
	for (i in seqAlong(wt_loci))
		// Check to see if cas9 cuts...
		if (runif(1) < cut_rate)
			// Convert the locus temporarily to an m5,
			// representing that this site is being cut.
			chromosome.addNewDrawnMutation(m5, wt_loci[i]);
	
	// If any cuts were made...
	if (chromosome.countOfMutationsOfType(m5)) {
		// Determine how extreme the cuts are relative to the target package (the drive).
		cut_loci = chromosome.positionsOfMutationsOfType(m5);
		leftmost_cut_index = cut_loci[0];
		rightmost_cut_index = cut_loci[size(cut_loci) - 1];
		// Sections that have already been cut out of the chromosome
		// also contribute to the size of the cut section.
		missing_loci = chromosome.positionsOfMutationsOfType(m6);
		// Adjusted indecies are amounts by which the cut ends differ
		// from the perfect cut that spans the entire target area.
		adjusted_left_index = leftmost_cut_index - sum(missing_loci < leftmost_cut_index);
		rightmost_cut_index = rightmost_cut_index + sum(missing_loci > rightmost_cut_index);
		adjusted_right_index = NUM_GRNAS - 1 - rightmost_cut_index;
		
		successful_homing_rate = BASELINE_HOMING_SUCCESS_RATE * (1 - HOMING_EDGE_EFFECT * adjusted_left_index) * (1 - HOMING_EDGE_EFFECT * adjusted_right_index);
		
		// Check to see if homing succeeds.
		if (runif(1) < successful_homing_rate)
			for (i in seqLen(NUM_GRNAS))
				chromosome.addNewDrawnMutation(m2, i);
		else {
			// A small percentage of of individuals have complete failures of the homing drive,
			// resulting in the entire section of the chromosome becoming a resistance allele.
			total_failure_avoidance_rate = 0.9 * (1 - 0.1 * adjusted_left_index) * (1 - 0.1 * adjusted_right_index);
			
			if (runif(1) < total_failure_avoidance_rate) {
				// Some catastrophic failures become all R1, at the following rate:
				total_r1_rate = 0.001 * (1 + adjusted_right_index - adjusted_left_index);
				// All-R1 catastrophic failures occur only in HAPLOSUFFICIENT or HAPLOSLETHAL drives.
				if (runif(1) < total_r1_rate & (HAPLOLETHAL | HAPLOSUFFICIENT))
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m3, i);
				else
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m4, i);
			}
			// If neither homing nor a catastrophic failure occur, normal repair happens.
			else {
				// If just one cut was made, create an R1 or R2 resistance allele.
				if (chromosome.countOfMutationsOfType(m5) == 1)
					addResistanceAllele(chromosome, cut_loci[0]);
				else {
					// If mutlple cuts were made, leftmost site to m4 (R2),
					// everthing else through the rightmost site to m6 (cut).
					number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
					for (index in seqLen(number_of_cuts))
						chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
					chromosome.addNewDrawnMutation(m4, cut_loci[0]);
				}
			}
		}
	}
}


//// HELPER FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
	for (i in seqAlong(source.positionsOfMutationsOfType(m1))) //m1 loci (wt)
		destination.addNewDrawnMutation(m1, source.positionsOfMutationsOfType(m1)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m2))) //m2 loci (dr)
		destination.addNewDrawnMutation(m2, source.positionsOfMutationsOfType(m2)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m3))) //m3 loci (r1)
		destination.addNewDrawnMutation(m3, source.positionsOfMutationsOfType(m3)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m4))) //m4 loci (r2)
		destination.addNewDrawnMutation(m4, source.positionsOfMutationsOfType(m4)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m5))) //m5 loci (cut)
		destination.addNewDrawnMutation(m5, source.positionsOfMutationsOfType(m5)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m6))) //m6 loci (gap)
		destination.addNewDrawnMutation(m6, source.positionsOfMutationsOfType(m6)[i]);
} //end function


//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	
	// If the drive is one that targets a gene function, two copies of either the gene or r2 incur an associated fitness cost.
	if (GENE_UTILITY_TRANSFORMATION_DRIVE) {
		if ((ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome1.countOfMutationsOfType(m4) > 0) & (ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome2.countOfMutationsOfType(m4) > 0))
			return GENE_UTILITY_TRANSFORMATION_FITNESS;
		return 1.0;
	}
	
	// Representation of the value of the two chromosomes. Baseline with check for drive or wt.
	c1_value = ifelse(ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	c2_value = ifelse(ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	
	// Check both chromosomes for resistance allele.
	if (ind.genome1.countOfMutationsOfType(m4) > 0)
		c1_value = c1_value * R2_FITNESS_VALUE;
	if (ind.genome2.countOfMutationsOfType(m4) > 0)
		c2_value = c2_value * R2_FITNESS_VALUE;
	
	// Return fitness for individual with this genotype.
	return sqrt(c1_value * c2_value);
}

//// OUTPUT WHEN TRACKING RIPLEY'S L 
// this will output <generation> <wt ind count> <ripley's L> to a csv file
function (void)outputRipleysL([string$ result=""]) {
	wt_counts = sim.getValue("wts");
	L = sim.getValue("L");
	path = getwd() + "/" + asString(getSeed()) + "_" + result + "_same_site_1d_L.csv";
	file = "generation,wt allele count, ripley's l\n";
	
	for (i in seqAlong(wt_counts))
		file = file + asString(i) + ',' + asString(wt_counts[i]) + ',' + asString(L[i]) + '\n';
	
	if (!writeFile(path, file))
		stop("error writing file."); //check if there's an issue
}

//// OUTPUT WHEN TRACKING BY CELL COUNT
// this will output <cell count> <cell x position> <cell y position> <generation> to a csv file
function (void)outputCellCounts([string$ result=""])  {
	path = getwd() + "/" + asString(getSeed()) + "_" + result + "_same_site_1d_counts.csv";
	file = "count, x, y, gen\n";
	hist = sim.getValue("hist");
	
	for (r in 0:(nrow(hist)-1))
		file = file + paste(hist[r,],sep=",") + "\n";
	
	if (!writeFile(path, file))
		stop("error writing file."); //check if there's an issue

}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {
	// First, evaluate whether reproduction is suppressed by a population suppression drive,
	// Then, select a mate based on fitness, then generate offspring.
	
	// Suppression drives:
	if (RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE)
		if (isRecessiveSterilitySuppressed(individual))
			return;
	
	if (TADE_SUPPRESSION)
		if (isHLSuppressed(individual))
			return;
	
	all_neighbors = i1.nearestNeighbors(individual, subpop.individualCount); //sample within SPEED
	neighbors = all_neighbors[all_neighbors.sex == "M"]; //male neighbors
	if (size(neighbors) == 0) // If no mates are in mate detection range, cannot mate.
		return;
	attempt_no = 0;
	while (1) {
		// First, select a random mate.
		mate_no = 0;
		if (size(neighbors) > 1)
			mate_no = rdunif(1, max=size(neighbors) - 1);
		selected_mate = neighbors[mate_no];
		// Determine attractiveness of mate.
		mate_attractiveness = genotypeFitness(selected_mate);
		if (selected_mate.pedigreeParentIDs[0] == individual.pedigreeParentIDs[0] & individual.pedigreeParentIDs[0] != -1)
			mate_attractiveness = mate_attractiveness * (1 - INBREEDING_AVOIDANCE_FACTOR);
		
		// Determine if this mate is chosen, based on attractiveness and number of mates so far.
		if (MALE_MATE_CAP) {
			if (selected_mate.getValue("mates") == MAX_MALE_MATINGS)
				catn("this male cannot mate bc cap reached");
			
			if ((runif(1) < mate_attractiveness) & (selected_mate.getValue("mates") < MAX_MALE_MATINGS)) {
				selected_mate.setValue("mates", selected_mate.getValue("mates") + 1); //increment his mate count
				break;  // Select this mate.
			}
		} else { // else just look at male attractiveness
			if (runif(1) < mate_attractiveness)
				break;
		}
		
		// After ten candidates fail, female gives up.
		attempt_no = attempt_no + 1;
		if (attempt_no == 9)
			return;
	}
	
	// Amount of competition faced per expected competition.
	adult_density_force = i2.totalOfNeighborStrengths(individual);
	competition_ratio = adult_density_force / EXPECTED_ADULT_COMPETITION; //allows higher growth when interaction strength is lower
	actual_competition_factor = GROWTH_AT_ZERO_DENSITY/ ((GROWTH_AT_ZERO_DENSITY-1) * competition_ratio + 1);
	
	// Offspring number based on binomial distrobution.
	// p for binomial draw. Number of offspring varies with female genes and competition.
	p = genotypeFitness(individual) * actual_competition_factor * 0.04 / (1 + RATE_FEMALES_SURVIVE);
	num_offspring = rbinom(1, 50, p);
	
	//in RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE, males with an r2 or d on both chromosomes are sterile
	if (RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE) {
		if (isRecessiveSterilitySuppressed(selected_mate))
			num_offspring = 0;
	}
	
	// In the TADS modification drive, r2/r2 males are sterile.
	// In TADS autosomal supression drive, both r2/r2 males and dr/dr males are sterile.
	if (TADS_MODIFICATION | TADS_AUTOSOMAL_SUPPRESSION) {
		if (sum(selected_mate.genomes.countOfMutationsOfType(m4) > 0) == 2)
			num_offspring = 0;
		if (TADS_AUTOSOMAL_SUPPRESSION)
			if (sum(selected_mate.genomes.countOfMutationsOfType(m2) == NUM_GRNAS) == 2)
				num_offspring = 0;
	}
	
	// Add offspring to the subpopulation.
	for (i in seqLen(num_offspring)) {
		offspring = subpop.addCrossed(individual, selected_mate);
		if (!isNULL(offspring)) {
			if (REPRISING_BOUNDARIES) {
				// redraw coordinates so that the offspring stays in bounds
				do position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
				while (!individual.subpopulation.pointInBounds(position));
				offspring.setSpatialPosition(position);
			}
			else {
				// edges wrap around
				position = individual.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
				offspring.setSpatialPosition(p1.pointPeriodic(position));
			}
		}
	}
}


//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
	
	// If the drive is x-linked, prevent it from being inherited on Y chromosome:
	if (X_LINKED_DRIVE)
		copy_genome(ifelse(childIsFemale,parent2Genome1,parent2Genome2), child.genome2);
	
	if (HOMING_DRIVE) {
		// Apply effects that happen in the germline.
		// First, resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		// Next, homology directed repair allows for homing to occur.
		if (!MALE_ONLY_PROMOTER)
			hdr(childGenome1, parent1);
		hdr(childGenome2, parent2);
		// Then additional resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, LATE_GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, LATE_GERMLINE_RESISTANCE_RATE);
		
		// Apply effects that happen in the embryo.
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	}
	
	if (TADS_MODIFICATION | TADS_AUTOSOMAL_SUPPRESSION) {
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		
		// If the child inherited r2 from a drive heterozygous father who originally did not have r2
		if (parent2.countOfMutationsOfType(m4)==0 & parent2.countOfMutationsOfType(m2) == NUM_GRNAS) {
			while (childGenome2.countOfMutationsOfType(m4) > 0) {
				// Half the time, loop back and give the child drive instead
				if (runif(1) < 0.5)
					childGenome2.addNewDrawnMutation(m2, seqLen(NUM_GRNAS));
				else {
					// Otherwise, recreate the non-drive chromosome before germline resistance
					// and undergo germline resistance again - only exit loop if r2 doesn't result
					copy_genome(ifelse((parent2Genome1.countOfMutationsOfType(m2) == NUM_GRNAS), parent2Genome2, parent2Genome1), childGenome2);
					germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
				}
			} // End while loop
		} //end if father was d/nonr2
		
		// Fathers who were r2 heterozygotes cannot pass on an r2 allele. If this was the case, give the child the father's other allele.
		if (childGenome2.countOfMutationsOfType(m4) > 0)
			copy_genome(ifelse((parent2Genome1.countOfMutationsOfType(m4) > 0), parent2Genome2, parent2Genome1), childGenome2);
		
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	} // end TADS block
	
	//TADE and TARE
	if (!(HOMING_DRIVE|TADS_MODIFICATION|TADS_AUTOSOMAL_SUPPRESSION)) {
		// Apply effects that happen in the germline.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		
		// Apply effects that happen in the embryo.
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	}
	
	// If the drive is x-linked, prevent gene drive mechanics on Y chromosome by resetting it:
	if (X_LINKED_DRIVE)
		copy_genome(ifelse(childIsFemale,parent2Genome1,parent2Genome2), child.genome2);
	
	// Offspring may be non viable offspring if drive
	// is haplolethal or haplosufficient recesive lethal.
	// Booleans describing presence of alleles.
	num_drives = sum(child.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
	num_r2s = sum(child.genomes.countOfMutationsOfType(m4) > 0);
	
	//haplolethality applies in TADE and TADE Suppression drives, or if programmed for homing drives
	haplolethal_one_rescue = ifelse((TADE|TADE_SUPPRESSION),T,F);
	
	//haplosufficiency rules apply in TARE of if programmed for homing drives
	haplosufficiency = ifelse((TARE), T, F);
	
	// If drive is haplolethal:
	// Offspring not viable if r2 on either chromosome... one drive is not enough to rescue
	if (haplolethal_one_rescue & num_r2s > 0)
		return F;
	
	// If this is TADE double rescue, then the offspring is only inviable if it obtained an r2 and DOES NOT have any drive alleles
	if (TADE_DOUBLE_RESCUE & num_r2s > 0 & num_drives==0)
		return F;
	
	// If drive is haplosufficient: offspring not viable if r2 on both chromosomes.
	if (haplosufficiency & num_r2s==2)
		return F;
	
	//if X-linked, male, and at least one r2, dies
	if (haplosufficiency & X_LINKED_DRIVE & (child.sex == "M") & (num_r2s > 0))
		return F;
	
	if ( !childIsFemale & MALE_MATE_CAP)
		child.setValue("mates", 0); //male children start with 0 mates
	
	return T;
}


//// COLOR RULES FOR SLIM GUI DISPLAY.
//// early event means this occurs right after offspring are produced
early() {
	all = sim.subpopulations.individuals;
	all.color = "blue"; //wt and resistance heterozygotes
	two_res = (all.genome1.countOfMutationsOfType(m4) | all.genome1.countOfMutationsOfType(m3) == NUM_GRNAS) & (all.genome2.countOfMutationsOfType(m4) | all.genome2.countOfMutationsOfType(m3) == NUM_GRNAS);
	
	all[two_res].color = "yellow"; //resistance homozygotes
	
	all[all.countOfMutationsOfType(m2) >= NUM_GRNAS].color = "red"; //red if at least one drive

} //end early


//// EVALUATE SPATIAL INTERACTIONS BETWEEN INDIVIDUALS FOR OTHER FUNCTIONS.
late() {
	i1.evaluate();
	i2.evaluate();
	
	all = sim.subpopulations.individuals;
	wt = all.countOfMutationsOfType(m2) == 0; //wts defined by not containing drive
	wts = all[wt];
	num_wt = size(wts);
	
	if (TRACK_RIPLEYS_L & sim.generation >= 10) {
		wts_before = sim.getValue("wts");
		sim.setValue("wts", c(wts_before, size(wts)));
		i3.evaluate();
		K = sum(i3.totalOfNeighborStrengths(wts));
		L = sqrt(K/PI) - DENSITY_INTERACTION_DISTANCE;
		catn("GEN: " + sim.generation + " RIPLEY's K: " + K);
		catn("RIPLEY'S L: " + L);
		l_before = sim.getValue("L");
		sim.setValue("L", c(l_before, L)); //store this L	
	}
}

//interaction between wt individuals only
interaction(i3) {
	if (!TRACK_RIPLEYS_L)
		return;
	
	if (receiver.countOfMutationsOfType(m2)!=0 | exerter.countOfMutationsOfType(m2) != 0)
		return 0.0;
	
	//receiver and exerter are both wt
	W = sim.getValue("wts");
	W = W[(length(W)-1)]; //most recent wt individual count
	return (1/(W^2));
}


//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE AND RULES FOR MOVEMENT.
//// late event means these will take effect after next generation's reproduction cycle.
late() {
	all = sim.subpopulations.individuals;
	is_female = all.sex=="F";
	all[!is_female].fitnessScaling = 0.0; //males will all die after reproducing
	females = all[is_female];
	females.fitnessScaling = 0.0; //females all die after reproduction, unless user specifies a survival rate
	
	//may allow some females to live on
	if (RATE_FEMALES_SURVIVE > 0.0) {
		num_survive = RATE_FEMALES_SURVIVE*size(females);
		fem_survive = sample(females, num_survive);
		fem_survive.fitnessScaling = 1.0;
	}
	
	surviving_inds = all[all.fitnessScaling > 0.0];
	
	//surviving individuals move
	for (ind in surviving_inds) {
		if (REPRISING_BOUNDARIES) {
			do position = ind.spatialPosition + rnorm(1, 0, FEMALE_SPEED);
			while (!ind.subpopulation.pointInBounds(position));
			ind.setSpatialPosition(position);
		}
		else {
			ind.x = ind.x + rnorm(1, 0, FEMALE_SPEED);
			ind.setSpatialPosition(p1.pointPeriodic(ind.spatialPosition));
		}
	}
}

//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// for standard drop:
	// Start with a population of wild type. Equilibriate for 10 generations before drop.
	if (!WT_START) {
		sim.addSubpop("p1", CAPACITY);
		sim.setValue("timer", "start");
		sim.setValue("track_eq", NULL);
		
		all = p1.individuals;
		all.genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
		
		// Start individuals scattered at random.
		all.x = p1.pointUniform(CAPACITY);
		
		//drop wt into empty space
	} else {
		sim.addSubpop("p1", DROP_SIZE);
		sim.setValue("timer", "start");
		all = p1.individuals;
		all.genomes.addNewDrawnMutation(m1,seqLen(NUM_GRNAS));
		all.x = runif(DROP_SIZE,0,DROP_RADIUS); //start from left edge
	}
	
	if (MALE_MATE_CAP) {
		all[all.sex=="M"].setValue("mates", 0); //track each male's reproductive history
	}

}

//for wt starts, track time from population to reach 50%+ in bins [0.25-0.3] to bin [0.75-0.8]
1: late() {
	if (!WT_START)
		return;
	
	inds = p1.individuals;
	x = inds.x;
	at_start = (x >= 0.25) & (x <= 0.3);
	inds_start = inds[at_start];
	timer = sim.getValue("timer");
	
	//only start timer once
	if (size(inds_start) >= EQUILIBRIUM_BIN_POPULATION) {
		if (timer == "start") {
			catn("starting timer at " + sim.generation);
			sim.setValue("timer", sim.generation);
		}
	}
	
	at_end = (x >= 0.75) & (x <= 0.8);
	inds_end = inds[at_end];
	
	if (size(inds_end) >= EQUILIBRIUM_BIN_POPULATION) {
		start_gen = sim.getValue("timer");
		this_gen = sim.generation;
		gens_elapsed = this_gen - start_gen;
		catn("stopping timer at " + this_gen);
		catn("TIMED_GENS:: " + gens_elapsed);
		sim.simulationFinished();
	}
}

//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
	if (WT_START | NO_DROP)
		return;
	
	// Add a drop of modified individuals to p1.
	if (MALE_ONLY_DROP)
		// Drop a population of only males.
		sim.addSubpop("p2", DROP_SIZE, 1.0);
	else if (FEMALE_ONLY_DROP)
		// Drop a population of only females.
		sim.addSubpop("p2", DROP_SIZE, 0.0);
	else
		sim.addSubpop("p2", DROP_SIZE);
	
	drop = p2.individuals;
	
	drop.genomes.addNewDrawnMutation(m2,seqLen(NUM_GRNAS));
	
	// For heterozygous drop, one of the chromosomes is set to wild type:
	if (HETEROZYGOUS_DROP)
		drop.genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
	
	// In X_LINKED_DRIVE males' genome2 (from father) is always wt.
	if (X_LINKED_DRIVE)
		drop[drop.sex == "M"].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
	
	// Move all the individuals from the drop into p1:
	p1.takeMigrants(drop);
	
	drop.x = runif(DROP_SIZE, 0, DROP_RADIUS);
	drop.color = "red";
	
	if (MALE_MATE_CAP)
		drop[drop.sex=="M"].setValue("mates", 0); //track males' mates
	
	if (TRACK_RIPLEYS_L) {
		sim.setValue("wts", NULL); //store wt individual count
		sim.setValue("L", NULL); //store Ripley's L
	}

} //end drop generation

//// PROGRAM OUTPUT.
10: late() {
	if (WT_START)
		return;
	
	all = p1.individuals;
	x = all.x;
	at_start = (x >= 0.25) & (x <= 0.3);
	inds_start = all[at_start];
	timer = sim.getValue("timer");
	this_gen = sim.generation - 10; //drop is generation 0
	
	//only start timer once
	if (size(inds_start) <= EQUILIBRIUM_BIN_POPULATION) {
		if (timer=="start") {
			catn("starting timer at " + this_gen);
			sim.setValue("timer", this_gen);
		}
	}
	
	at_end = (x >= 0.75) & (x <= 0.8);
	inds_end = all[at_end];
	
	if (size(inds_end) <= EQUILIBRIUM_BIN_POPULATION) {
		if (timer!="stopped" & timer!="start") {
			start_gen = sim.getValue("timer");
			gens_elapsed = this_gen - start_gen;
			catn("stopping timer at " + this_gen);
			catn("TIMED_GENS:: " + gens_elapsed);
			sim.setValue("timer", "stopped"); //stop tracking
		}
	}
	
	// population size
	pop_size = length(all);
	males = all[all.sex=="M"];
	num_males = length(males);
	females = all[all.sex=="F"];
	num_females = length(females);
	
	//count of chromosomes
	num_y = num_males;
	num_x = 2*num_females + num_males;
	num_autosomal_chromosomes = 2*pop_size;
	
	//allele counts
	num_wt = sum(all.genomes.countOfMutationsOfType(m1)==NUM_GRNAS);
	num_dr = sum(all.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
	//	num_complete_r1 = sum(all.genomes.countOfMutationsOfType(m3)==NUM_GRNAS);
	//	num_r2 = sum(all.genomes.countOfMutationsOfType(m4)>0);
	//	num_has_drive = sum(all.countOfMutationsOfType(m2) >= NUM_GRNAS);
	//	rate_has_drive = num_has_drive/pop_size;
	
	if (num_wt < EQUILIBRIUM_WT_ALLELE_THRESHOLD) //first check for chase
		catn("POTENTIAL_CHASE:: " + this_gen);
	
	num_dr = sum(all.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
	num_has_drive = sum(all.countOfMutationsOfType(m2) >= NUM_GRNAS);
	rate_has_drive = num_has_drive/pop_size; //least one drive
	
	//rate calculations may differ
	if (!X_LINKED_DRIVE) {
//		rate_wt = num_wt/num_autosomal_chromosomes;
		rate_dr = num_dr/num_autosomal_chromosomes;
	} else {
//		rate_wt = num_wt/num_x;
		rate_dr = num_dr/num_x;
	}

	if (!NO_DROP) {
		catn("GEN: " + this_gen + " RATE_DRIVE: " + rate_dr);
		catn("WT_ALLELES:: " + num_wt + " " + this_gen + " " + pop_size);
	}
	
	if (TRACK_BY_CELL)  {
		inds = all[all.countOfMutationsOfType(m2) == 0]; //no drive individuals
		x = inds.x;
		y = inds.y;
		left_pos_vec = 0:(sqrt(NUMBER_OF_CELLS) - 1);
		cell_width = 1.0/length(left_pos_vec);
		
		for (pos_x in left_pos_vec) {
			div_left = pos_x * cell_width;
			for (pos_y in left_pos_vec) {
				div_bot = pos_y * cell_width;
				in_division = (x >= div_left) & (x < div_left + cell_width) & (y >= div_bot) & (y < div_bot + cell_width);
				inds_in_cell = inds[in_division];
				cell_count = size(inds_in_cell);
				hist_vec = c(cell_count, div_left, div_bot, this_gen);
				catn("count: " + cell_count + " x: " + div_left + " y: " + div_bot + " gen: " + this_gen);
				
				if (sim.generation == 0 & (pos_x == left_pos_vec[0]) & (pos_y == left_pos_vec[0])) {
					sim.setValue("hist", matrix(hist_vec, nrow = 1));
				} else {
					hist_mat = sim.getValue("hist");
					hist_mat = rbind(hist_mat, hist_vec);
					sim.setValue("hist", hist_mat);
				}
			}
		}
	}
	
	if (NO_DROP)
		return;
	
	//1-drive was lost and wt population remained
	if (num_dr == 0 & pop_size>0) {
		catn("POP_PERSISTS:: " + this_gen);
		
		if (TRACK_RIPLEYS_L)
			outputRipleysL("pers");
		if (TRACK_BY_CELL)
			outputCellCounts("pers");
		sim.simulationFinished();
	}
	
	//2-equilibrium state attained
	if (rate_dr== 1 & pop_size > 0) {
		start = sim.getValue("track_eq");
		if (isNULL(start)) {
			sim.setValue("track_eq", 1);
		} else if (start == 10) { //only allow state for 10 generations
			started_at = this_gen - 10;
			catn("EQUILIBRIUM:: " + started_at);
			
			if (TRACK_RIPLEYS_L)
				outputRipleysL("eq");
			
			if (TRACK_BY_CELL)
				outputCellCounts("eq");
			
			sim.simulationFinished();
		} else {
			elapsed = start + 1;
			sim.setValue("track_eq", elapsed);
		}
	}
	
	//3-suppression occurs
	if (pop_size == 0){
		catn("SUPPRESSED:: " + this_gen);
		if (TRACK_RIPLEYS_L)
			outputRipleysL("supp");
		if (TRACK_BY_CELL)
			outputCellCounts("supp");
		sim.simulationFinished();
	}
}

////output 1000 generations after drop if simulation hasn't ended already
1010 late() {
	if (WT_START)
		return;
	
	if (TRACK_RIPLEYS_L)
		outputRipleysL("end");
	if (TRACK_BY_CELL)
		outputCellCounts("end");

	all = p1.individuals;
	has_drive = sum(all.countOfMutationsOfType(m2) >= NUM_GRNAS);
	rate_has_drive = has_drive/size(all);
	
	catn("ENDING_AFTER_1000:: " + rate_has_drive);
	sim.simulationFinished();
}

5000 late() {
	if (WT_START)
		catn("ENDING_AFTER_5000::");
}



