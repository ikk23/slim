
// Author: Sam Champer and Isabel Kim.
// Created in association with Jackson Champer and the Messer lab.

// A framework for simulating many different gene drives
// with varying parameters, intended to be configured by
// alterning the heading below, or by dynamically varying
// values in the header using an associated Python file.

// The following header to be replaced via python,
// such that these values can be varied across multiple runs of slim.

// SET HAPLOSUFFICIENT TO TRUE

//these constants may change based on cluster runs
initialize() {
	defineConstant("CAPACITY", 10000); //try 1000000
	defineConstant("DRIVE_FITNESS_VALUE", 0.99);
	defineConstant("DROP_SIZE", 400);
	defineConstant("EMBRYO_RESISTANCE_RATE", 0.95);
	defineConstant("GERMLINE_RESISTANCE_RATE", 0.99);
	defineConstant("HETEROZYGOUS_DROP", T);
	defineConstant("MALE_ONLY_DROP", F);
	defineConstant("NUM_GRNAS", 1);
	defineConstant("TADE",F);
	defineConstant("TADE_SUPPRESSION", F);
	defineConstant("TADE_DOUBLE_RESCUE",F);
	defineConstant("TARE", F);
	defineConstant("TADS_AUTOSOMAL_SUPPRESSION", T);
	defineConstant("TADS_MODIFICATION", F);
	defineConstant("R1_OCCURRENCE_RATE", 0.0); //keep
	defineConstant("X_LINKED_DRIVE", F); //moved up
	// */    // End header.
	
	// Below are other globals.
	defineConstant("BASELINE_HOMING_SUCCESS_RATE", 1.0);
	defineConstant("FEMALE_ONLY_DROP", F);
	defineConstant("GENE_UTILITY_TRANSFORMATION_DRIVE", F); //added
	defineConstant("GENE_UTILITY_TRANSFORMATION_FITNESS", 0.95); //added
	defineConstant("GRNA_SATURATION_SIMULATED", F);
	defineConstant("HAPLOLETHAL", F);
	defineConstant("HAPLOSUFFICIENT", F);
	defineConstant("HOMING_DRIVE", F);
	defineConstant("HOMING_EDGE_EFFECT", 0.1);
	defineConstant("HOMING_PHASE_CUT_RATE", 0.93);
	defineConstant("LATE_GERMLINE_RESISTANCE_RATE", 0.0);
	defineConstant("MALE_ONLY_PROMOTER", F);
	defineConstant("MALE_MATE_CAP", F);
	defineConstant("MAX_MALE_MATINGS", 50);
	defineConstant("NUM_CUT_PHASES", 1);
	defineConstant("R2_FITNESS_VALUE", 1.0);
	defineConstant("RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE", F);
	defineConstant("RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE", F);
	
	// For mortality rate as a function of age:
	// Some females are allowed to survive two generations:
	defineConstant("RATE_FEMALES_SURVIVE", 0.0);
	
	// This simulation will use a non-Wright-Fisher model.
	initializeSLiMModelType("nonWF");
	
	// Four variations: Wild type, drive, r1 resistance, r2 resistance.
	wt = initializeMutationType("m1", 0.5, "f", 0.0);
	dr = initializeMutationType("m2", 0.5, "f", 0.0);
	r1 = initializeMutationType("m3", 0.5, "f", 0.0);
	r2 = initializeMutationType("m4", 0.5, "f", 0.0);
	cut = initializeMutationType("m5", 0.5, "f", 0.0);
	gap = initializeMutationType("m6", 0.5, "f", 0.0);
	variations = c(wt, dr, r1, r2, cut, gap);
	
	// Variations are all part of g1 genome element.
	initializeGenomicElementType("g1", variations, c(1, 1, 1, 1, 1, 1));
	
	// Element is NUM_GRNAS long, each spot on the element representing a GRNA target location.
	initializeGenomicElement(g1, 0, NUM_GRNAS - 1);
	
	// These mutations overwrite one another.
	variations.mutationStackPolicy = "l";
	variations.mutationStackGroup = 1;
	
	// No mutation in this model.
	initializeRecombinationRate(0.0);
	initializeMutationRate(0.0);
	
	// Simulate sexual reproduction: A for autosome.
	initializeSex("A");
}

//// FUNCTION FOR EVALUATING POPULATION SUPPRESSION WITH RECESSIVE FEMALE or MALE STERILITY STYLE SUPPRESSION.
function (logical)isRecessiveSterilitySuppressed(o<Individual>$ ind) {
	// Check both chromosomes for drive and type 2 resistance allele. These are the only variants that affect suppression.
	
	// Individual cannot reproduce if both chromosomes have either a drive or an r2.
	if ((ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome1.countOfMutationsOfType(m4) > 0) & (ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS| ind.genome2.countOfMutationsOfType(m4) > 0))
		return T;
	return F;
}


//// FUNCTION FOR EVALUATING POPULATION SUPPRESSION WITH HAPLOLETHAL STYLE SUPPRESSION.
function (logical)isHLSuppressed(o<Individual>$ ind) {
	// Check both chromosomes for the drive.	
	// Individual cannot reproduce if both chromosomes have a drive.
	if (sum(ind.genomes.countOfMutationsOfType(m2)==NUM_GRNAS)==2)
		return T;
	return F;
}


//// HELPER FUNCTION FOR FORMING A RESISTANCE ALLELE AT A GIVEN LOCUS.
function (void)addResistanceAllele(o<Genome>$ genome, i$ locus) {
	// Resistance alleles form at a specified rate.	m3 is r1, m4 is r2.
	genome.addNewDrawnMutation(ifelse((runif(1) < R1_OCCURRENCE_RATE), m3,m4), locus);
}


//// FUNCTION FOR CAS9 EFFECTS IN THE GERMLINE.
function (void)germline(o<Genome>$ child_chromosome, o<Individual>$ parent, f$ resistance_rate) {
	// Determine presence of drive in this parent.
	parent_drive_count = sum(parent.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If parent doesn't have drive allele, nothing happens in germline.
	if (!parent_drive_count)
		return;
	
	// Chromosome must have wt to cut, or nothing happens.
	if (child_chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Using the resistance rate passed to the function,
	// determine the per phase cut rate.
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - resistance_rate)^(1 / (NUM_CUT_PHASES * grna_factor));
	
	// Determine if cas9 cuts the chromosome in the germline.
	casCut(child_chromosome, per_phase_cut_rate);
}


//// FUNCTION FOR CAS9 EFFECTS IN EMBRYO.
function (void)embryo(o<Genome>$ child_chromosome_1, o<Genome>$ child_chromosome_2, o<Individual>$ mother) {
	// Determine presence of drive in this mother.
	mother_drive_count = sum(mother.genomes.countOfMutationsOfType(m2) == NUM_GRNAS);
	// If mother doesn't have drive allele, nothing happens in embryo.
	if (!mother_drive_count)
		return;
	
	// Determine the per phase cut rate.
	if (HOMING_DRIVE & sum(mother.genomes.countOfMutationsOfType(m1) == NUM_GRNAS) == 1)
		// Special case for homing drive individual that is dr/wt based on experimental data.
		cas_factor = 1.82;
	grna_factor = 1;
	if (GRNA_SATURATION_SIMULATED)
		grna_factor = NUM_GRNAS;
	per_phase_cut_rate = 1 - (1 - EMBRYO_RESISTANCE_RATE)^(mother_drive_count / (NUM_CUT_PHASES * grna_factor));
	
	// Then pass this rate as an argument to  the casCut funtion to
	// determine if cas9 cuts in the embryo for each chromosome.
	casCut(child_chromosome_1, per_phase_cut_rate);
	casCut(child_chromosome_2, per_phase_cut_rate);
}


//// FUNCTION FOR CAS9 CUTTING A TARGET CHROMOSOME.
function (void)casCut(o<Genome>$ chromosome, f$ per_phase_cut_rate) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	
	// Vector of possible loci for cas9 to cut:
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// In each cut phase...
	for (i in seqLen(NUM_CUT_PHASES)) {
		// At each possible locus...
		for (j in seqAlong(wt_loci)) {
			// Check to see if cas9 cuts...
			if (runif(1) < per_phase_cut_rate) {
				// Convert the locus temporarily to an m5,
				// representing that this site is being cut.
				chromosome.addNewDrawnMutation(m5, wt_loci[j]);
			}
		}
		// If any cuts were made...
		if (chromosome.countOfMutationsOfType(m5)) {
			cut_loci = chromosome.positionsOfMutationsOfType(m5);
			// If just one cut is made, create an R1 or R2 resistance allele.
			if (chromosome.countOfMutationsOfType(m5) == 1)
				addResistanceAllele(chromosome, cut_loci[0]);
			else {
				// If multiple cuts are made in the same cut phase, loss of
				// function results. Convert leftmost site to m4 (R2)
				// everthing else through the rightmost site to m6 (cut).
				number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
				for (index in seqLen(number_of_cuts))
					chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
				chromosome.addNewDrawnMutation(m4, cut_loci[0]);
			}
			// Because some wt loci may have been cut out of the
			// chromosome, remake the vector of possible cut sites.
			if (chromosome.countOfMutationsOfType(m1) == 0)
				return;
			wt_loci = chromosome.positionsOfMutationsOfType(m1);
		}
	}
}


//// FUNCTION FOR SIMULATING HOMING THAT OCCURS DURING HOMOLOGY DIRECTED REPAIR.
function (void)hdr(o<Genome>$ chromosome, o<Individual>$ parent) {
	// If chromosome has no wild type targets to cut, cas9 does nothing.
	if (chromosome.countOfMutationsOfType(m1) == 0)
		return;
	// Determine presence of drive in this parent. If parent doesn't have drive allele, nothing happens in germline.
	if (parent.countOfMutationsOfType(m2)==0)
		return;
	
	// Rate of cutting occurs at the HOMING_PHASE_CUT_RATE, modified by gRNA saturation, if toggled on.
	cut_rate = HOMING_PHASE_CUT_RATE;
	if (GRNA_SATURATION_SIMULATED)
		cut_rate = 1 - (1 - HOMING_PHASE_CUT_RATE)^(1/NUM_GRNAS);
	
	// Vector of possible loci.
	wt_loci = chromosome.positionsOfMutationsOfType(m1);
	
	// At each possible locus...
	for (i in seqAlong(wt_loci))
		// Check to see if cas9 cuts...
		if (runif(1) < cut_rate)
			// Convert the locus temporarily to an m5,
			// representing that this site is being cut.
			chromosome.addNewDrawnMutation(m5, wt_loci[i]);
	
	// If any cuts were made...
	if (chromosome.countOfMutationsOfType(m5)) {
		// Determine how extreme the cuts are relative to the target package (the drive).
		cut_loci = chromosome.positionsOfMutationsOfType(m5);
		leftmost_cut_index = cut_loci[0];
		rightmost_cut_index = cut_loci[size(cut_loci) - 1];
		// Sections that have already been cut out of the chromosome
		// also contribute to the size of the cut section.
		missing_loci = chromosome.positionsOfMutationsOfType(m6);
		// Adjusted indecies are amounts by which the cut ends differ
		// from the perfect cut that spans the entire target area.
		adjusted_left_index = leftmost_cut_index - sum(missing_loci < leftmost_cut_index);
		rightmost_cut_index = rightmost_cut_index + sum(missing_loci > rightmost_cut_index);
		adjusted_right_index = NUM_GRNAS - 1 - rightmost_cut_index;
		
		successful_homing_rate = BASELINE_HOMING_SUCCESS_RATE * (1 - HOMING_EDGE_EFFECT * adjusted_left_index) * (1 - HOMING_EDGE_EFFECT * adjusted_right_index);
		
		// Check to see if homing succeeds.
		if (runif(1) < successful_homing_rate)
			for (i in seqLen(NUM_GRNAS))
				chromosome.addNewDrawnMutation(m2, i);
		else {
			// A small percentage of of individuals have complete failures of the homing drive,
			// resulting in the entire section of the chromosome becoming a resistance allele.
			total_failure_avoidance_rate = 0.9 * (1 - 0.1 * adjusted_left_index) * (1 - 0.1 * adjusted_right_index);
			
			if (runif(1) < total_failure_avoidance_rate) {
				// Some catastrophic failures become all R1, at the following rate:
				total_r1_rate = 0.001 * (1 + adjusted_right_index - adjusted_left_index);
				// All-R1 catastrophic failures occur only in HAPLOSUFFICIENT or HAPLOSLETHAL drives.
				if (runif(1) < total_r1_rate & (HAPLOLETHAL | HAPLOSUFFICIENT))
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m3, i);
				else
					for (i in seqLen(NUM_GRNAS))
						chromosome.addNewDrawnMutation(m4, i);
			}
			// If neither homing nor a catastrophic failure occur, normal repair happens.
			else {
				// If just one cut was made, create an R1 or R2 resistance allele.
				if (chromosome.countOfMutationsOfType(m5) == 1)
					addResistanceAllele(chromosome, cut_loci[0]);
				else {
					// If mutlple cuts were made, leftmost site to m4 (R2),
					// everthing else through the rightmost site to m6 (cut).
					number_of_cuts = cut_loci[size(cut_loci) - 1] - cut_loci[0];
					for (index in seqLen(number_of_cuts))
						chromosome.addNewDrawnMutation(m6, cut_loci[0] + index + 1);
					chromosome.addNewDrawnMutation(m4, cut_loci[0]);
				}
			}
		}
	}
}


//// HELPER FUNCTION TO OVERWRITE ONE GENOME WITH ANOTHER.
function (void)copy_genome(o<Genome>$ source, o<Genome>$ destination) {
	for (i in seqAlong(source.positionsOfMutationsOfType(m1))) //m1 loci (wt)
		destination.addNewDrawnMutation(m1, source.positionsOfMutationsOfType(m1)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m2))) //m2 loci (dr)
		destination.addNewDrawnMutation(m2, source.positionsOfMutationsOfType(m2)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m3))) //m3 loci (r1)
		destination.addNewDrawnMutation(m3, source.positionsOfMutationsOfType(m3)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m4))) //m4 loci (r2)
		destination.addNewDrawnMutation(m4, source.positionsOfMutationsOfType(m4)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m5))) //m5 loci (cut)
		destination.addNewDrawnMutation(m5, source.positionsOfMutationsOfType(m5)[i]);
	for (i in seqAlong(source.positionsOfMutationsOfType(m6))) //m6 loci (gap)
		destination.addNewDrawnMutation(m6, source.positionsOfMutationsOfType(m6)[i]);
} //end function


//// RULES FOR FITNESS BASED ON GENOTYPE.
function (f$)genotypeFitness(o<Individual>$ ind) {
	
	// If the drive is one that targets a gene function, two copies of either the gene or r2 incur an associated fitness cost.
	if (GENE_UTILITY_TRANSFORMATION_DRIVE) {
		if ((ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome1.countOfMutationsOfType(m4) > 0) & (ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS | ind.genome2.countOfMutationsOfType(m4) > 0))
			return GENE_UTILITY_TRANSFORMATION_FITNESS;
		return 1.0;
	}
	
	// Representation of the value of the two chromosomes. Baseline with check for drive or wt.
	c1_value = ifelse(ind.genome1.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	c2_value = ifelse(ind.genome2.countOfMutationsOfType(m2) == NUM_GRNAS, DRIVE_FITNESS_VALUE, 1.0);
	
	// Check both chromosomes for resistance allele.
	if (ind.genome1.countOfMutationsOfType(m4) > 0)
		c1_value = c1_value * R2_FITNESS_VALUE;
	if (ind.genome2.countOfMutationsOfType(m4) > 0)
		c2_value = c2_value * R2_FITNESS_VALUE;
	
	// Return fitness for individual with this genotype.
	return sqrt(c1_value * c2_value);
}


//// REPRODUCTION RULES FOR EACH FEMALE.
reproduction(NULL, "F") {
	// First, evaluate whether reproduction is suppressed by a population suppression drive,
	// Then, select a mate based on fitness, then generate offspring.
	// Suppression drives:
	if (RECESSIVE_FEMALE_STERILE_SUPPRESSION_DRIVE)
		if (isRecessiveSterilitySuppressed(individual))
			return;
	
	if (TADE_SUPPRESSION)
		if (isHLSuppressed(individual))
			return;
	
	attempt_no = 0;
	while (1) {
		// First, select a random potential mate.
		selected_mate = subpop.sampleIndividuals(1, sex="M");
		if (!selected_mate.size())
			return;  // No available mates.
		
		// Determine attractiveness of potential mate.
		mate_attractiveness = genotypeFitness(selected_mate);
		
		// Determine if this mate is chosen, based on attractiveness and number of mates so far.
		if (MALE_MATE_CAP) {
			if (selected_mate.getValue("mates") == MAX_MALE_MATINGS)
				catn("this male cannot mate bc cap reached");
			
			if ((runif(1) < mate_attractiveness) & (selected_mate.getValue("mates") < MAX_MALE_MATINGS)) {
				selected_mate.setValue("mates", selected_mate.getValue("mates") + 1); //increment his mate count
				break;  // Select this mate.
			}
		} else { // else just look at male attractiveness
			if (runif(1) < mate_attractiveness)
				break;
		}
		
		// After ten candidates fail, female gives up.
		attempt_no = attempt_no + 1;
		if (attempt_no == 9)
			return;
	}
	// Mate has now been selected. 	
	
	// Fitness based on density, for density dependant fecundity.
	capacity_fitness_scaling = 10 / ((9 * p1.individualCount / CAPACITY) + 1);
	
	// Offspring number based on binomial distrobution.
	// p for binomial draw. Number of offspring varies with female genes and competition.
	p = genotypeFitness(individual) * capacity_fitness_scaling * 0.04 / (1 + RATE_FEMALES_SURVIVE);
	num_offspring = rbinom(1, 50, p);
	
	//in RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE, males with an r2 or d on both chromosomes are sterile
	if (RECESSIVE_MALE_STERILE_SUPPRESSION_DRIVE) {
		if (isRecessiveSterilitySuppressed(selected_mate))
			num_offspring = 0;
	}
	
	// In the TADS modification drive, r2/r2 males are sterile.
	// In TADS autosomal supression drive, both r2/r2 males and dr/dr males are sterile.
	if (TADS_MODIFICATION | TADS_AUTOSOMAL_SUPPRESSION) {
		if (sum(selected_mate.genomes.countOfMutationsOfType(m4) > 0) == 2)
			num_offspring = 0;
		if (TADS_AUTOSOMAL_SUPPRESSION)
			if (sum(selected_mate.genomes.countOfMutationsOfType(m2) == NUM_GRNAS) == 2)
				num_offspring = 0;
	}
	
	for (i in seqLen(num_offspring)) {
		// Add offspring to the subpopulation.
		offspring = subpop.addCrossed(individual, selected_mate);
	}
} //end reproduction


//// GENE DRIVE IMPLEMENTATION RULES THAT OCCUR IN EVERY CHILD.
1: modifyChild() {
	
	// If the drive is x-linked, prevent it from being inherited on Y chromosome:
	if (X_LINKED_DRIVE)
		copy_genome(ifelse(childIsFemale,parent2Genome1,parent2Genome2), child.genome2);
	
	if (HOMING_DRIVE) {
		// Apply effects that happen in the germline.
		// First, resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		// Next, homology directed repair allows for homing to occur.
		if (!MALE_ONLY_PROMOTER)
			hdr(childGenome1, parent1);
		hdr(childGenome2, parent2);
		// Then additional resistance alleles form.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, LATE_GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, LATE_GERMLINE_RESISTANCE_RATE);
		
		// Apply effects that happen in the embryo.
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	} //end homing
	
	if (TADS_MODIFICATION | TADS_AUTOSOMAL_SUPPRESSION) {
		// Apply germline resistance
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		
		// If the child inherited r2 from a drive heterozygous father who originally did not have r2
		if (parent2.countOfMutationsOfType(m4)==0 & parent2.countOfMutationsOfType(m2) == NUM_GRNAS) {
			while (childGenome2.countOfMutationsOfType(m4) > 0) {
				// Half the time, loop back and give the child drive instead
				if (runif(1) < 0.5)
					childGenome2.addNewDrawnMutation(m2, seqLen(NUM_GRNAS));
				else {
					// Otherwise, recreate the non-drive chromosome before germline resistance
					// and undergo germline resistance again - only exit loop if r2 doesn't result
					copy_genome(ifelse((parent2Genome1.countOfMutationsOfType(m2) == NUM_GRNAS), parent2Genome2, parent2Genome1), childGenome2);
					germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
				}
			} // End while loop
		} //end if father was d/nonr2
		
		// Fathers who were r2 heterozygotes cannot pass on an r2 allele. If this was the case, give the child the father's other allele.
		if (childGenome2.countOfMutationsOfType(m4) > 0)
			copy_genome(ifelse((parent2Genome1.countOfMutationsOfType(m4) > 0), parent2Genome2, parent2Genome1), childGenome2);
		
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	} // end TADS block
	
	//TADE and TARE
	if (!(HOMING_DRIVE|TADS_MODIFICATION|TADS_AUTOSOMAL_SUPPRESSION)) {
		// Apply effects that happen in the germline.
		if (!MALE_ONLY_PROMOTER)
			germline(childGenome1, parent1, GERMLINE_RESISTANCE_RATE);
		germline(childGenome2, parent2, GERMLINE_RESISTANCE_RATE);
		
		// Apply effects that happen in the embryo.
		if (!MALE_ONLY_PROMOTER)
			embryo(childGenome1, childGenome2, parent1);
	}
	
	// If the drive is x-linked, prevent gene drive mechanics on Y chromosome by resetting it:
	if (X_LINKED_DRIVE)
		copy_genome(ifelse(childIsFemale,parent2Genome1,parent2Genome2), child.genome2);
	
	// Offspring may be non viable offspring if drive
	// is haplolethal or haplosufficient recesive lethal.
	// Booleans describing presence of alleles.
	num_drives = sum(child.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
	num_r2s = sum(child.genomes.countOfMutationsOfType(m4) > 0);
	
	//haplolethality applies in TADE and TADE Suppression drives, or if programmed for homing drives
	haplolethal_one_rescue = ifelse((HAPLOLETHAL|TADE|TADE_SUPPRESSION),T,F);
	
	//haplosufficiency rules apply in TARE of if programmed for homing drives
	haplosufficiency = ifelse((HAPLOSUFFICIENT|TARE), T, F);
	
	// If drive is haplolethal:
	// Offspring not viable if r2 on either chromosome... one drive is not enough to rescue
	if (haplolethal_one_rescue & num_r2s > 0)
		return F;
	
	// If this is TADE double rescue, then the offspring is only inviable if it obtained an r2 and DOES NOT have any drive alleles
	if (TADE_DOUBLE_RESCUE & (num_r2s > 0) & (num_drives==0))
		return F;
	
	// If drive is haplosufficient: offspring not viable if r2 on both chromosomes.
	if (haplosufficiency & num_r2s==2)
		return F;
	
	//if X-linked, male, and at least one r2, dies
	if (haplosufficiency & X_LINKED_DRIVE & (child.sex == "M") & (num_r2s > 0))
		return F;
	
	if (!childIsFemale)
		child.setValue("mates", 0); //male children start with 0 mates
	
	return T;
}


//// SURVIVAL RULES FOR THE SIMULATION BASED ON AGE
late() {
	all = sim.subpopulations.individuals;
	all[all.sex=="M"].fitnessScaling = 0.0; //males don't live on
	
	females = all[all.sex=="F"]; //females age 0 may live on. females age 1 die.
	females[females.age > 0].fitnessScaling = 0.0;
	females[females.age==0].fitnessScaling = RATE_FEMALES_SURVIVE;
} //end late


//// START THE SIMULATION BY ADDING AN INITIAL WILD POPULATION.
1 {
	// Start with a population of wild type flies.
	sim.addSubpop("p1", CAPACITY);
	p1.individuals[p1.individuals.sex=="M"].setValue("mates", 0);  //number of females a male has mated with so far
	
	p1.individuals.genomes.addNewDrawnMutation(m1, seqLen(NUM_GRNAS)); //all start wt 
}


//// DROP A GROUP OF MODIFIED INDIVIDUALS INTO THE POPULATION.
10 {
	// Add a drop of modified individuals to p1.
	if (MALE_ONLY_DROP)
		// Drop a population of only males.
		sim.addSubpop("p2", DROP_SIZE, 1.0);
	else if (FEMALE_ONLY_DROP)
		// Drop a population of only females.
		sim.addSubpop("p2", DROP_SIZE, 0.0);
	else
		sim.addSubpop("p2", DROP_SIZE);
	
	drop = p2.individuals;
	
	// Now set the drop individuals to the correct genotypes:
	drop.genomes.addNewDrawnMutation(m2,seqLen(NUM_GRNAS));
	
	// For heterozygous drop, one of the chromosomes is set to wild type:
	if (HETEROZYGOUS_DROP)
		drop.genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
	
	// In X_LINKED_DRIVE males' genome2 (from father) is always wt.
	if (X_LINKED_DRIVE)
		drop[drop.sex == "M"].genome2.addNewDrawnMutation(m1, seqLen(NUM_GRNAS));
	
	// Move all the individuals from the drop into p1:
	p1.takeMigrants(drop);
	drop[drop.sex=="M"].setValue("mates", 0);
} //end drop gen

//// PROGRAM OUTPUT.
late() {
	// population size
	all = sim.subpopulations.individuals;
	pop_size = length(all);
	males = all[all.sex=="M"];
	num_males = length(males);
	females = all[all.sex=="F"];
	num_females = length(females);
	
	//count of chromosomes
	num_y = num_males;
	num_x = 2*num_females + num_males;
	num_autosomal_chromosomes = 2*pop_size;
	
	//allele counts
	num_wt = sum(all.genomes.countOfMutationsOfType(m1)==NUM_GRNAS);
	num_dr = sum(all.genomes.countOfMutationsOfType(m2)==NUM_GRNAS);
	num_has_drive = sum(all.countOfMutationsOfType(m2) >= NUM_GRNAS);
	rate_has_drive = num_has_drive/pop_size;
	
	//rate calculations may differ
	if (!(X_LINKED_DRIVE)) {
		num_complete_r1 = sum(all.genomes.countOfMutationsOfType(m3)==NUM_GRNAS);
		num_r2 = sum(all.genomes.countOfMutationsOfType(m4)>0);
		rate_wt = num_wt/num_autosomal_chromosomes;
		rate_dr = num_dr/num_autosomal_chromosomes;
		rate_complete_r1 = num_complete_r1/num_autosomal_chromosomes;
		rate_r2 = num_r2/num_autosomal_chromosomes;
	} else {
		rate_wt = num_wt/num_x;
		rate_dr = num_dr/num_x;
		num_complete_r1 = sum(all.genomes.countOfMutationsOfType(m3)==NUM_GRNAS);
		num_r2 = sum(all.genomes.countOfMutationsOfType(m4)>0);
		rate_complete_r1 = num_complete_r1/num_x;
		rate_r2 = num_r2/num_x;
	}
	
	// Output for humans to look at:
	catn("Rates in POPSIZE: " + p1.individualCount + " GEN: " + paste(asInteger(sim.generation), ""));
	catn("WT: " + rate_wt + "\tDR: " + rate_dr + "\tR1: " + rate_complete_r1 + "\tR2: " + rate_r2 +"\tR1: " + rate_complete_r1);
	catn("\t% w AT LEAST ONE DR: " + rate_has_drive);
	catn("Number of drive alleles present: " + num_dr);
	catn("PERCENT MALE: " + (num_males/pop_size) + " PERCENT FEMALE: " + " " + (num_females/pop_size));
	
	//(1) Percent One Drive, (2) Generation, (3) Drive Frequency, (4) R1 Rate, (5) Partial R1 Rate
	catn("PYTHON::"+" " + rate_has_drive + " " + asInteger(sim.generation) + " " + rate_dr + " " + rate_complete_r1);
} //end output


//// PROGRAM END CONDITION.
110 late() {
	sim.simulationFinished();
}

